<?php
/**
 * @file
 * RoyalSlider module.
 */

/**
 * Implements hook_permission().
 */
function royalslider_permission() {
  return array(
    'administer royalslider' =>  array(
      'title' => t('Administer the RoyalSlider module'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function royalslider_libraries_info() {
  $libraries['royalslider'] = array(
    'name' => 'RoyalSlider',
    'vendor url' => 'http://dimsemenov.com/plugins/royal-slider/',
    'download url' => 'http://dimsemenov.com/plugins/royal-slider/pricing/',
    'version arguments' => array(
      'file' => 'jquery.royalslider.min.js',
      'pattern' => '/jquery.royalslider v(\d+\.+\d+\.+\d+)/',
      'lines' => 1,
    ),
    'files' => array(
      'js' => array(
        'jquery.royalslider.min.js',
      ),
      'css' => array(
        'royalslider.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_libraries_info_alter().
 */
function royalslider_libraries_info_alter(&$libraries) {
  // Add support for jQuery Easing module
  if (module_exists('jqeasing')) {
    $libraries['flexslider']['dependencies'][] = 'easing (>=1.3)';
  }
}

/**
 * Implements hook_library().
 *
 * We also define RoyalSlider through the core library callbacks
 */
function royalslider_library() {
  $library_path = libraries_get_path('royalslider');

  $libraries['royalslider'] = array(
    'title' => 'RoyalSlider',
    'website' => 'http://dimsemenov.com/plugins/royal-slider/',
    'version' => '9.4.92',
    'js' => array(
      $library_path . '/jquery.royalslider.min.js' => array(
        'scope' => 'footer',
      ),
    ),
    'css' => array(
      $library_path . '/royalslider.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_help().
 */
function royalslider_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/royalslider/edit/%':
      return
        '<p>'
        . t('An <em>option set</em> defines exactly how a royalslider image gallery looks like on your site. '
        . 'It is s a combination of <a href="@styles">image styles</a> for the various image sizes and RoyalSlider library options.', array('@styles' => url('admin/config/media/image-styles'))) . '<br />'
        . t('For a full documentation of all options, refer to the official @docs.', array('@docs' => l(t('RoyalSlider documentation'), 'http://dimsemenov.com/plugins/royal-slider/')))
        . '</p>';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function royalslider_ctools_plugin_api($owner, $api) {
  if ($owner == 'royalslider' && $api == 'royalslider_default_preset') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function royalslider_ctools_plugin_directory($module, $type) {
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Create a new optionset object
 *
 * Note that this function does not save the optionset to the database.
 * @see royalslider_optionset_save()
 */
function royalslider_optionset_create($values = array()) {
  ctools_include('export');
  $optionset = ctools_export_crud_new('royalslider_optionset');

  // Set the options to an array
  $optionset->options = array();

  // Assign specified values
  if (isset($values['name'])) {
    $optionset->name = $values['name'];
  }
  if (isset($values['title'])) {
    $optionset->title = $values['title'];
  }
  if (isset($values['options']) and is_array($values['options'])) {
    $optionset->options = $values['options'];
  }

  // Merge default settings with any given settings
  $optionset_defaults = _royalslider_optionset_defaults();
  $optionset->options = $optionset_defaults += $optionset->options;

  return $optionset;
}

/**
 * Fetches all option sets from the database and returns them as an associative array.
 */
function royalslider_optionset_load_all() {
  ctools_include('export');
  $optionsets = ctools_export_crud_load_all('royalslider_optionset');
  foreach ($optionsets as $optionset) {
    // Ensure the optionset is typecast after being loaded from DB
    _royalslider_typecast_optionset($optionset->options);
  }
  return $optionsets;
}

/**
 * Fetches the given option set and returns it as an object or NULL, if no set could be found.
 */
function royalslider_optionset_load($optionset_name) {
  ctools_include('export');
  $optionset = ctools_export_crud_load('royalslider_optionset', $optionset_name);
  // Ensure the optionset is typecast after being loaded from DB
  _royalslider_typecast_optionset($optionset->options);
  return $optionset;
}

/**
 * Checks whether an option set with the given name already exists.
 */
function royalslider_optionset_exists($optionset_name) {
  ctools_include('export');
  $optionset = ctools_export_crud_load('royalslider_optionset', $optionset_name);
  return isset($optionset->name);
}

/**
 * Saves the given option set to the database.
 * Set the $new flag if this set has not been written before.
 *
 * @return object|boolean
 *  Returns the newly saved object, FALSE otherwise.
 */
function royalslider_optionset_save($optionset, $new = FALSE) {
  // If the machine name is missing or already in use, return an error.
  if (empty($optionset->name) or (FALSE != royalslider_optionset_exists($optionset->name) and $new)) {
    return FALSE;
  }

  // Check for an invalid list of options
  if (isset($optionset->options) and !is_array($optionset->options)) {
    return FALSE;
  }


  // If the title is missing, default to the name
  if (empty($optionset->title)) {
    $optionset->title = $optionset->name;
  }

  // Merge default settings with any given settings
  $optionset_defaults = _royalslider_optionset_defaults();
  $optionset->options = $optionset_defaults += $optionset->options;

  // Prepare the database values.
  $db_values = array(
    'name' => $optionset->name,
    'title' => $optionset->title,
    'options' => _royalslider_typecast_optionset($optionset->options),
  );

  if ($new) {
    $result = drupal_write_record('royalslider_optionset', $db_values);
  }
  else {
    $result = drupal_write_record('royalslider_optionset', $db_values, 'name');
  }

  // Return the object if the values were saved successfully.
  if (($new and SAVED_NEW == $result) or (!$new and SAVED_UPDATED == $result)) {
    return $optionset;
  }

  // Otherwise, an error occured
  return FALSE;
}

/**
 * Deletes the given option set from the database.
 *
 * @param object|string $optionset
 *  Optionset object or machine name
 */
function royalslider_optionset_delete($optionset) {
  if (isset($optionset->name)) {
    $name = $optionset->name;
  }
  else {
    $name = $optionset;
  }
  db_delete('royalslider_optionset')->condition('name', $name)->execute();
}

/**
 * Default settings for a newly created option set
 *
 * @param string $key [optional]
 *  Get specific default value
 *
 */
function _royalslider_optionset_defaults($key = NULL) {
  // We add typecasts to ensure the variables get json encoded properly
  $defaults = array(
    // @TODO add settings.
  );

  // Typecast the values
  _royalslider_typecast_optionset($defaults);

  // Return the specific item
  if (isset($key) and array_key_exists($key, $defaults)) {
    return $defaults[$key];
  }

  // Return all items
  return $defaults;
}

/**
 * Adds the typecasting to the values so that the generated
 * json array keeps the right values
 */
function _royalslider_typecast_optionset(&$options) {
  if (isset($options) && !empty($options)) {
    foreach ($options as $key => $value) {
      switch ($key) {
        // @TODO cast settings.
        case 'namespace':
          $options[$key] = (string)$value;
          break;
      }
    }
  }
}

/**
 * List of all easing methods available from jQuery Easing v1.3
 */
function _royalslider_jqeasing_options() {
  return array(
    "jswing" => "jswing",
    "def" => "def",
    "easeInQuad" => "easeInQuad",
    "easeOutQuad" => "easeOutQuad",
    "easeInOutQuad" => "easeInOutQuad",
    "easeInCubic" => "easeInCubic",
    "easeOutCubic" => "easeOutCubic",
    "easeInOutCubic" => "easeInOutCubic",
    "easeInQuart" => "easeInQuart",
    "easeOutQuart" => "easeOutQuart",
    "easeInOutQuart" => "easeInOutQuart",
    "easeInQuint" => "easeInQuint",
    "easeOutQuint" => "easeOutQuint",
    "easeInOutQuint" => "easeInOutQuint",
    "easeInSine" => "easeInSine",
    "easeOutSine" => "easeOutSine",
    "easeInOutSine" => "easeInOutSine",
    "easeInExpo" => "easeInExpo",
    "easeOutExpo" => "easeOutExpo",
    "easeInOutExpo" => "easeInOutExpo",
    "easeInCirc" => "easeInCirc",
    "easeOutCirc" => "easeOutCirc",
    "easeInOutCirc" => "easeInOutCirc",
    "easeInElastic" => "easeInElastic",
    "easeOutElastic" => "easeOutElastic",
    "easeInOutElastic" => "easeInOutElastic",
    "easeInBack" => "easeInBack",
    "easeOutBack" => "easeOutBack",
    "easeInOutBack" => "easeInOutBack",
    "easeInBounce" => "easeInBounce",
    "easeOutBounce" => "easeOutBounce",
    "easeInOutBounce" => "easeInOutBounce",
  );
}



function royalslider_field_formatter_info() {
  return array(
    'royalslider' => array(
      'label' => t('Royal Slider'),
      'field types' => array('image'),
      'settings' => array(
        'limit' => '',
        'limit_link' => TRUE,
        'fullscreen' => array(
          'formatter' => 'image',
          'image' => array(
            'settings' => array(
              'image_style' => ''
            )
          )
        ),
        'slides' => array(
          'formatter' => 'image',
          'image' => array(
            'settings' => array(
              'image_style' => 'large'
            )
          )
        ),
        'controls' => array(
          'formatter' => 'image',
          'image' => array(
            'settings' => array(
              'image_style' => 'thumbnail'
            )
          )
        ),
      )
    ),
  );
}

function royalslider_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $formatters = field_ui_formatter_options($field['type']);
  $form = array();
  $form['#tree'] = TRUE;
  $form['limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#description' => t('Enter a number here to set a maximum number of slides to be displayed.  Otherwise all items in the field will be used.'),
    '#size' => 3,
    '#default_value' => $settings['limit'],
  );
  $form['limit_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Count Link'),
    '#description' => t('Show a count of total images linked to the full display when the limit is exceeded.'),
    '#default_value' => $settings['limit_link'],
  );
  $form['fullscreen'] = array(
    '#type' => 'fieldset',
    '#title' => t('Full Screen'),
    'formatter' => array(
      '#type' => 'select',
      '#title' => t('Full Screen Formatter'),
      '#attributes' => array(
        'class' => array('royalslider-fullscreen-formatter')
      ),
      '#default_value' => $settings['fullscreen']['formatter']
    ),
    '#options' => array()
  );
  $form['slides'] = array(
    '#type' => 'fieldset',
    '#title' => t('Slides'),
    'formatter' => array(
      '#type' => 'select',
      '#title' => t('Slides Formatter'),
      '#attributes' => array(
        'class' => array('royalslider-slides-formatter')
      ),
      '#default_value' => $settings['slides']['formatter']
    ),
    '#options' => array()
  );
  $form['controls'] = array(
    '#type' => 'fieldset',
    '#title' => t('Controls'),
    'formatter' => array(
      '#type' => 'select',
      '#title' => t('Controls Formatter'),
      '#attributes' => array(
        'class' => array('royalslider-controls-formatter')
      ),
      '#default_value' => $settings['controls']['formatter']
    ),
    '#options' => array()
  );
  foreach($formatters as $type => $name) {
    if($type != 'image') continue;
    $formatter_opts[$type] = $name;
    $formatter = field_info_formatter_types($type);
    $settings_form = array();
    $function = $formatter['module'] . '_field_formatter_settings_form';
    if (function_exists($function)) {
      $this_instance = $instance;
      $this_instance['display'][$view_mode]['settings'] = $settings['fullscreen'][$type]['settings'];
      $form['fullscreen'][$type] = array(
        '#type' => 'fieldset',
        '#title' => t('@formatter Settings', array('@formatter' => $name))
      );
      $form['fullscreen'][$type]['settings'] = $function($field, $this_instance, $view_mode, array(), $form_state);
      $form['fullscreen'][$type]['#states'] = array(
        'visible' => array(
        	'.rcd-royalslider-fullscreen-formatter' => array('value' => $type)
        )
      );
      $this_instance['display'][$view_mode]['settings'] = $settings['slides'][$type]['settings'];
      $form['slides'][$type] = array(
        '#type' => 'fieldset',
        '#title' => t('@formatter Settings', array('@formatter' => $name))
      );
      $form['slides'][$type]['settings'] = $function($field, $this_instance, $view_mode, array(), $form_state);
      $form['slides'][$type]['#states'] = array(
        'visible' => array(
        	'.royalslider-slides-formatter' => array('value' => $type)
        )
      );
      $this_instance['display'][$view_mode]['settings'] = $settings['controls'][$type]['settings'];

      $form['controls'][$type] = array(
        '#type' => 'fieldset',
        '#title' => t('@formatter Settings', array('@formatter' => $name))
      );
      $form['controls'][$type]['settings'] = $function($field, $this_instance, $view_mode, array(), $form_state);
      $form['controls'][$type]['#states'] = array(
        'visible' => array(
        	'.royalslider-controls-formatter' => array('value' => $type)
        )
      );
    }
  }
  $form['fullscreen']['formatter']['#options'] = array('' => t('None')) + $formatter_opts;
  $form['slides']['formatter']['#options'] = $formatter_opts;
  $form['controls']['formatter']['#options'] = array('' => t('None')) + $formatter_opts;
  return $form;
}

function royalslider_field_formatter_settings_summary($field, $instance, $view_mode) {
  return t('Royal Slider');
}

function royalslider_theme($existing, $type, $theme, $path) {
  return array(
    'royalslider_formatter' => array(
      'render element' => 'element',
      'path' => $path . '/theme',
      'template' => 'royalslider-formatter',
      'file' => 'royalslider.theme.inc'
    )
  );
}

function royalslider_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  if(!count($items)) return array();
  $settings['items_total'] = count($items);
  $element = array(
    '#theme' => 'royalslider_formatter',
    '#settings' => $settings,
  );
  if($settings['limit']) {
    $items = array_shift(array_chunk($items, $settings['limit']));
  }
  if($settings['fullscreen']['formatter']) {
    $formatter = field_info_formatter_types($settings['fullscreen']['formatter']);
    $function = $formatter['module'] . "_field_formatter_view";
    if(function_exists($function)) {
      $formatter_display = $display;
      $formatter_display['settings'] = $settings['fullscreen'][$settings['fullscreen']['formatter']]['settings'];
      $formatter_display['type'] = $settings['fullscreen']['formatter'];
      $formatter_display['module'] = $formatter['module'];
      $element['fullscreen'] = $function($entity_type, $entity, $field, $instance, $langcode, $items, $formatter_display);
    }
  }
  if($settings['slides']['formatter']) {
    $formatter = field_info_formatter_types($settings['slides']['formatter']);
    $function = $formatter['module'] . "_field_formatter_view";
    if(function_exists($function)) {
      $formatter_display = $display;
      $formatter_display['settings'] = $settings['slides'][$settings['slides']['formatter']]['settings'];
      $formatter_display['type'] = $settings['slides']['formatter'];
      $formatter_display['module'] = $formatter['module'];
      $element['slides'] = $function($entity_type, $entity, $field, $instance, $langcode, $items, $formatter_display);
    }
  }
  if($settings['controls']['formatter'] && count($items) > 1) {
    $formatter = field_info_formatter_types($settings['controls']['formatter']);
    $function = $formatter['module'] . "_field_formatter_view";
    if(function_exists($function)) {
      $formatter_display = $display;
      $formatter_display['settings'] = $settings['controls'][$settings['controls']['formatter']]['settings'];
      $formatter_display['type'] = $settings['controls']['formatter'];
      $formatter_display['module'] = $formatter['module'];
      $element['controls'] = $function($entity_type, $entity, $field, $instance, $langcode, $items, $formatter_display);
    }
  }

  return $element;
}
